{"version":3,"sources":["components/Gnarwhal/Face/styles.module.scss","components/Gnarwhal/Body/styles.module.scss","components/Gnarwhal/styles.module.scss","components/Button/styles.module.scss","components/Gnarwhal/Face/index.js","components/Gnarwhal/Body/index.js","components/Gnarwhal/index.js","components/Button/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","face","faceHappy","eyes","eyesHappy","squint","spot","fin","swim","tail","wag","horn","gnarwhal","button","primary","secondary","Gnarwhal","isHappy","this","props","react_default","a","createElement","className","Component","Body","styles","Face","Gnarwhal_Body","Button","_this$props","onButtonClick","buttonText","buttonType","onClick","App","state","setHappy","bool","_this","setState","_this2","components_Gnarwhal","components_Button","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EACAA,EAAAC,QAAA,CAAkBC,KAAA,qBAAAC,UAAA,6CAAAC,KAAA,qBAAAC,UAAA,6CAAAC,OAAA,yCCAlBN,EAAAC,QAAA,CAAkBM,KAAA,qBAAAC,IAAA,oBAAAC,KAAA,qBAAAC,KAAA,qBAAAC,IAAA,oBAAAC,KAAA,yCCAlBZ,EAAAC,QAAA,CAAkBY,SAAA,2CCAlBb,EAAAC,QAAA,CAAkBa,OAAA,uBAAAC,QAAA,6CAAAC,UAAA,8QCgBHC,mLAZJ,IACCC,EAAYC,KAAKC,MAAjBF,QAER,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAUf,YAAYD,QACpCmB,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAUb,YAAYD,SACtCiB,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAUb,YAAYD,iBAPvBqB,6BCYRC,mLAXX,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,IAAOpB,OACvBc,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,IAAOf,OACvBS,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,IAAOjB,OACvBW,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,IAAOnB,cAPZiB,aCgBJR,mLAZJ,IACCC,EAAYC,KAAKC,MAAjBF,QAER,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,IAAOd,UACrBQ,EAAAC,EAAAC,cAACK,EAAD,CAAMV,QAASA,IACfG,EAAAC,EAAAC,cAACM,EAAD,cAPeJ,8BCURK,mLAXJ,IAAAC,EAC2CZ,KAAKC,MAA/CY,EADDD,EACCC,cAAeC,EADhBF,EACgBE,WAAYC,EAD5BH,EAC4BG,WAEnC,OACEb,EAAAC,EAAAC,cAAA,UAAQC,UAAWG,IAAOO,GAAaC,QAASH,GAC7CC,UANYR,aC6BNW,6MA3BbC,MAAQ,CAAEnB,SAAS,KAEnBoB,SAAW,SAAAC,GACTC,EAAKC,SAAS,CAAEvB,QAASqB,6EAGlB,IAAAG,EAAAvB,KACCD,EAAYC,KAAKkB,MAAjBnB,QAER,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACoB,EAAD,CAAUzB,QAASA,IACnBG,EAAAC,EAAAC,cAACqB,EAAD,CACEZ,cAAe,kBAAMU,EAAKJ,UAAS,IACnCL,WAAW,eACXC,WAAW,YAEbb,EAAAC,EAAAC,cAACqB,EAAD,CACEZ,cAAe,kBAAMU,EAAKJ,UAAS,IACnCL,WAAW,eACXC,WAAW,sBArBHT,aCOEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8aaceeac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"face\":\"styles_face__245ip\",\"faceHappy\":\"styles_faceHappy__1VssW styles_face__245ip\",\"eyes\":\"styles_eyes__VUKIk\",\"eyesHappy\":\"styles_eyesHappy__2_GXV styles_eyes__VUKIk\",\"squint\":\"styles_squint__3X6s2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spot\":\"styles_spot__3mNO-\",\"fin\":\"styles_fin__fwkdi\",\"swim\":\"styles_swim__3R0Th\",\"tail\":\"styles_tail__39A3d\",\"wag\":\"styles_wag__GOEVR\",\"horn\":\"styles_horn__PvpyS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gnarwhal\":\"styles_gnarwhal__1POKT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__F4cpF\",\"primary\":\"styles_primary__21Mg2 styles_button__F4cpF\",\"secondary\":\"styles_secondary__1-6b1 styles_button__F4cpF\"};","import React, { Component } from \"react\";\nimport { face, faceHappy, eyes, eyesHappy } from \"./styles.module.scss\";\n// Components\n\nclass Gnarwhal extends Component {\n  render() {\n    const { isHappy } = this.props;\n\n    return (\n      <div className={isHappy ? faceHappy : face}>\n        <div className={isHappy ? eyesHappy : eyes} />\n        <div className={isHappy ? eyesHappy : eyes} />\n      </div>\n    );\n  }\n}\n\nexport default Gnarwhal;\n","import React, { Component } from \"react\";\nimport styles from \"./styles.module.scss\";\n\nclass Body extends Component {\n  render() {\n    return (\n      <div>\n        <div className={styles.spot} />\n        <div className={styles.horn} />\n        <div className={styles.tail} />\n        <div className={styles.fin} />\n      </div>\n    );\n  }\n}\n\nexport default Body;\n","import React, { Component } from \"react\";\nimport styles from \"./styles.module.scss\";\n// Components\nimport Face from \"./Face\";\nimport Body from \"./Body\";\n\nclass Gnarwhal extends Component {\n  render() {\n    const { isHappy } = this.props;\n\n    return (\n      <div className={styles.gnarwhal}>\n        <Face isHappy={isHappy} />\n        <Body />\n      </div>\n    );\n  }\n}\n\nexport default Gnarwhal;\n","import React, { Component } from \"react\";\nimport styles from \"./styles.module.scss\";\n// Components\n\nclass Button extends Component {\n  render() {\n    const { onButtonClick, buttonText, buttonType } = this.props;\n\n    return (\n      <button className={styles[buttonType]} onClick={onButtonClick}>\n        {buttonText}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Gnarwhal from \"./components/Gnarwhal\";\nimport Button from \"./components/Button\";\n\nclass App extends Component {\n  state = { isHappy: false };\n\n  setHappy = bool => {\n    this.setState({ isHappy: bool });\n  };\n\n  render() {\n    const { isHappy } = this.state;\n\n    return (\n      <div className=\"wrap\">\n        <Gnarwhal isHappy={isHappy} />\n        <Button\n          onButtonClick={() => this.setHappy(true)}\n          buttonText=\"🙂\"\n          buttonType=\"primary\"\n        />\n        <Button\n          onButtonClick={() => this.setHappy(false)}\n          buttonText=\"☹️\"\n          buttonType=\"secondary\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}